{"version":3,"sources":["components/Form.js","components/Result.js","components/App.js","reportWebVitals.js","index.js"],"names":["Form","props","onSubmit","submit","type","placeholder","value","onChange","change","Result","weather","city","date","sunrise","sunset","temp","pressure","wind","err","content","sunriseTime","Date","toLocaleTimeString","sunsetTime","className","keyAPI","process","App","state","handleInputChange","e","setState","target","handleCitySubmit","preventDefault","API","fetch","then","res","ok","Error","json","data","time","toLocaleString","prevState","sys","main","speed","catch","error","console","log","this","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAkBeA,EAhBF,SAACC,GACZ,OACE,mCACE,uBAAMC,SAAUD,EAAME,OAAtB,UACE,uBACEC,KAAK,OACLC,YAAY,yBACZC,MAAOL,EAAMK,MACbC,SAAUN,EAAMO,SAElB,kDCiCOC,EA3CA,SAACR,GACd,MACEA,EAAMS,QADAC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,KAAMC,EAApB,EAAoBA,QAASC,EAA7B,EAA6BA,OAAQC,EAArC,EAAqCA,KAAMC,EAA3C,EAA2CA,SAAUC,EAArD,EAAqDA,KAAMC,EAA3D,EAA2DA,IAEvDC,EAAU,KAEd,IAAKD,GAAOP,EAAM,CAChB,IAAMS,EAAc,IAAIC,KAAe,IAAVR,GAAgBS,qBACvCC,EAAa,IAAIF,KAAc,IAATP,GAAeQ,qBAC3CH,EACE,gCACE,kDACkB,6BAAKR,IADvB,OAGA,0CACW,iCAASC,OAEpB,4CACa,iCAASQ,OAEtB,2CACY,iCAASG,OAErB,gDACiB,mCAASR,EAAT,eAEjB,6CACc,mCAASC,EAAT,aAEd,+CACgB,mCAASC,EAAT,gBAKtB,OACE,mCACE,qBAAKO,UAAU,SAAf,SACGN,EAAG,2BAAuBP,EAAvB,OAAmCQ,OClCzCM,EAASC,mCAETC,E,4MACJC,MAAQ,CACNtB,MAAO,GACPK,KAAM,GACNE,QAAS,GACTC,OAAQ,GACRE,SAAU,GACVD,KAAM,GACNE,KAAM,GACNC,KAAK,G,EAEPW,kBAAoB,SAACC,GACnB,EAAKC,SAAS,CACZzB,MAAOwB,EAAEE,OAAO1B,S,EAGpB2B,iBAAmB,SAACH,GAClBA,EAAEI,iBAEF,IAAMC,EAAG,4DAAwD,EAAKP,MAAMtB,MAAnE,kBAAkFmB,EAAlF,iBACTW,MAAMD,GACHE,MAAK,SAACC,GACL,GAAIA,EAAIC,GACN,OAAOD,EAET,MAAME,MAAM,uCAEbH,MAAK,SAACC,GAAD,OAASA,EAAIG,UAClBJ,MAAK,SAACK,GACL,IAAMC,GAAO,IAAItB,MAAOuB,iBACxB,EAAKb,UAAS,SAACc,GAAD,MAAgB,CAC5B3B,KAAK,EACLN,KAAM+B,EACNhC,KAAMkC,EAAUvC,MAChBO,QAAS6B,EAAKI,IAAIjC,QAClBC,OAAQ4B,EAAKI,IAAIhC,OACjBE,SAAU0B,EAAKK,KAAK/B,SACpBD,KAAM2B,EAAKK,KAAKhC,KAChBE,KAAMyB,EAAKzB,KAAK+B,aAGnBC,OAAM,SAACC,GACNC,QAAQC,IAAIF,GACZ,EAAKnB,UAAS,SAACc,GACb,MAAO,CACL3B,KAAK,EACLP,KAAMkC,EAAUvC,c,4CAM1B,WACE,OACE,sBAAKkB,UAAU,MAAf,UACE,cAAC,EAAD,CACElB,MAAO+C,KAAKzB,MAAMtB,MAClBE,OAAQ6C,KAAKxB,kBACb1B,OAAQkD,KAAKpB,mBAEf,cAAC,EAAD,CAAQvB,QAAS2C,KAAKzB,e,GA5DZ0B,aAkEH3B,IC7DA4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpB,MAAK,YAAkD,IAA/CqB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.fc6383c8.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Form = (props) => {\n  return (\n    <>\n      <form onSubmit={props.submit}>\n        <input\n          type=\"text\"\n          placeholder=\"Type searching city...\"\n          value={props.value}\n          onChange={props.change}\n        />\n        <button>Search</button>\n      </form>\n    </>\n  );\n};\n\nexport default Form;\n","import React from \"react\";\n\nconst Result = (props) => {\n  const { city, date, sunrise, sunset, temp, pressure, wind, err } =\n    props.weather;\n  let content = null;\n\n  if (!err && city) {\n    const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString();\n    const sunsetTime = new Date(sunset * 1000).toLocaleTimeString();\n    content = (\n      <div>\n        <h1>\n          The weather for <em>{city}</em>:\n        </h1>\n        <p>\n          Today is <strong>{date}</strong>\n        </p>\n        <p>\n          Sunrise at <strong>{sunriseTime}</strong>\n        </p>\n        <p>\n          Sunset at <strong>{sunsetTime}</strong>\n        </p>\n        <p>\n          Temperature is <strong>{temp} Â°C</strong>\n        </p>\n        <p>\n          Pressure is <strong>{pressure} hPa</strong>\n        </p>\n        <p>\n          Wind speed is <strong>{wind} m/s</strong>\n        </p>\n      </div>\n    );\n  }\n  return (\n    <>\n      <div className=\"result\">\n        {err ? `We couldn't find ${city}...` : content}\n      </div>\n    </>\n  );\n};\n\nexport default Result;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Form from \"./Form\";\nimport Result from \"./Result\";\n\nconst keyAPI = process.env.REACT_APP_WEATHER_API_KEY;\n\nclass App extends Component {\n  state = {\n    value: \"\",\n    city: \"\",\n    sunrise: \"\",\n    sunset: \"\",\n    pressure: \"\",\n    temp: \"\",\n    wind: \"\",\n    err: false,\n  };\n  handleInputChange = (e) => {\n    this.setState({\n      value: e.target.value,\n    });\n  };\n  handleCitySubmit = (e) => {\n    e.preventDefault();\n\n    const API = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&appid=${keyAPI}&units=metric`;\n    fetch(API)\n      .then((res) => {\n        if (res.ok) {\n          return res;\n        }\n        throw Error(\"Cannot find the town provided...\");\n      })\n      .then((res) => res.json())\n      .then((data) => {\n        const time = new Date().toLocaleString();\n        this.setState((prevState) => ({\n          err: false,\n          date: time,\n          city: prevState.value,\n          sunrise: data.sys.sunrise,\n          sunset: data.sys.sunset,\n          pressure: data.main.pressure,\n          temp: data.main.temp,\n          wind: data.wind.speed,\n        }));\n      })\n      .catch((error) => {\n        console.log(error);\n        this.setState((prevState) => {\n          return {\n            err: true,\n            city: prevState.value,\n          };\n        });\n      });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form\n          value={this.state.value}\n          change={this.handleInputChange}\n          submit={this.handleCitySubmit}\n        />\n        <Result weather={this.state} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}